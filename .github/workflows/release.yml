name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Trigger release for version bump'
        required: false
        default: 'false'

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get current version
        id: version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Check existing release
        id: check_release
        run: |
          if gh release view ${{ env.VERSION }} &>/dev/null; then
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate changelog
        if: env.EXISTS == 'false'
        id: changelog
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$latest_tag" ]; then
            # If no tags exist, get all commits
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            git log --pretty=format:"- %s (%h)" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            # Get commits since last tag
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            git log ${latest_tag}..HEAD --pretty=format:"- %s (%h)" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create Git Tag
        if: env.EXISTS == 'false'
        run: |
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      - name: Create GitHub Release
        if: env.EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            ## Changes
            ${{ env.CHANGELOG }}
            
            ## Installation
            ```bash
            npm install erfdb@${{ env.VERSION }}
            ```
          prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}